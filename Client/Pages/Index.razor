@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>
count
<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection chatHubConnection;
    private HubConnection timeHubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;
    private string count;

    protected override async Task OnInitializedAsync()
    {
        chatHubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        chatHubConnection.On<string, string>("ReceiveMessage", (user, message) =>
            {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await chatHubConnection.StartAsync();

        timeHubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/timehub"))
            .Build();

        timeHubConnection.On<int>("ReceiveMessage", (cnt) =>
            {
            string encodedMsg = $"time: {cnt}";
            count = encodedMsg;
            StateHasChanged();
        });

        await timeHubConnection.StartAsync();
    }

    Task Send() =>
        chatHubConnection.SendAsync("SendMessage", userInput, messageInput);

    public bool IsConnected =>
        chatHubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await chatHubConnection.DisposeAsync();
    }
}