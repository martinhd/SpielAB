@page "/user/{Team}/{Player}"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorSignalRApp.Shared
@inject HttpClient Http
@inject NavigationManager NavManager
@implements IAsyncDisposable


<h3>
    team: @Team     player: @Player
</h3>
<br />

<button @onclick="CorrectAnswer" disabled="@(IsActiveTeam)">Correct Answer</button>
<button @onclick="WrongAnswer" disabled="@(IsActiveTeam)">Wrong Answer</button>
<br/>

<div  style="@taskhidden">@currentTask.KeyWord</div>

<table class="table" style="@taskhidden">
    <thead>
        <tr>
            <th>taboo</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var taboo in currentTask.Taboos)
        {
            <tr>
                <td>@taboo</td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public string Team { get; set; }

    [Parameter]
    public string Player { get; set; }

    public bool IsActiveTeam = true;

    private HubConnection taskHubConnection;

    private SpielTask currentTask = new SpielTask();

    private string taskhidden = "visibility:hidden";


    protected override async Task OnInitializedAsync()
    {
        currentTask = await Http.GetFromJsonAsync<SpielTask>("Api/CurrentTask");

        taskHubConnection = new HubConnectionBuilder()
           .WithUrl(NavManager.ToAbsoluteUri("/spieltaskhub"))
           .Build();

        taskHubConnection.On<SpielTask>("ReceiveMessage", (task) =>
        {
            currentTask = task;
            if (Team == task.Team)
                IsActiveTeam = true;
            else IsActiveTeam = false;

            if(IsActiveTeam && Player!=task.Player)
                taskhidden = "visibility:hidden";
            else taskhidden = "";

            
            StateHasChanged();
        });

        await taskHubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        await taskHubConnection.DisposeAsync();
    }

    private async void CorrectAnswer()
    {
        currentTask = await Http.GetFromJsonAsync<SpielTask>("Api/NextTask");
        StateHasChanged();
    }

    private async void WrongAnswer()
    {
        currentTask = await Http.GetFromJsonAsync<SpielTask>("Api/NextTask");
        StateHasChanged();
    }
}
